//
//  CurrencyConversionInteractor.swift
//  CurrencyConverter
//
//  Created by Tiago Chaves on 09/02/20.
//  Copyright (c) 2020 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyConversionBusinessLogic {
    func getSupportedCurrencies()
    func getExchangeRates()
}

protocol CurrencyConversionDataStore {
    var exchangeRates: ExchangesRates? { get set }
}

class CurrencyConversionInteractor: CurrencyConversionBusinessLogic, CurrencyConversionDataStore {
    var presenter: CurrencyConversionPresentationLogic?
    var supportedCurrenciesWorker: SupportedCurrenciesWorkerProtocol
    var exchangeRatesWorker: ExchangeRatesWorkerProtocol
    
    var exchangeRates: ExchangesRates?
    
    init(supportedCurrenciesWorker: SupportedCurrenciesWorkerProtocol = NetworkSupportedCurrenciesWorker(dataManager: NetworkDataManager()),
         exchangeRatesWorker: ExchangeRatesWorkerProtocol = NetworkExchangeRatesWorker(dataManager: NetworkDataManager())) {
        self.supportedCurrenciesWorker = supportedCurrenciesWorker
        self.exchangeRatesWorker = exchangeRatesWorker
    }
    
    // MARK: - Get Supported Currencies
    func getSupportedCurrencies() {
        supportedCurrenciesWorker.loadSupportedCurrencies { (currencies, error) in
            let response = CurrencyConversion.LoadSupportedCurrencies.Response(currencies: currencies, error: error)
            self.presenter?.formatCurrencyListForView(response: response)
        }
    }
    
    // MARK: - Get Exchange Rates
    func getExchangeRates() {
        exchangeRatesWorker.getExchangeRates(completion: { (exchangeRates, error) in
            if error == nil {
                self.exchangeRates = exchangeRates
            } else {
                self.presenter?.getExchangeRatesFailed()
            }
        })
    }
}
